import {
  View,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Text,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useTheme } from "../../context/ThemeContext";
import { useState, useEffect } from "react";
import { Card } from "../../components/Card";
import { Typography } from "../../components/Typography";
import {
  Search,
  Filter,
  MessageSquare,
  DollarSign,
  Tag,
  Heart,
} from "react-native-feather";
import MarketListings from "../../components/marketplace/MarketListings";
import MarketContracts from "../../components/marketplace/MarketContracts";
import { TranslatedText } from "../../components/TranslatedText";
import MarketPriceChart from "@/components/MarketPriceChart";

type MarketItem = {
  $id: string;
  crop_type: string;
  price_per_kg: number;
  total_quantity: number;
  available_quantity: number;
  status: string;
  farmer_id: string;
  $createdAt: string;
  $updatedAt: string;
  // Additional fields for UI presentation
  seller?: {
    name: string;
    location: string;
    rating: number;
    image: string;
  };
  image?: string;
  description?: string;
  bids?: {
    $id: string;
    quantity: number;
    price_per_kg: number;
    buyer_id: string;
    status: string;
  }[];
  isFavorite?: boolean;
};

const prices = [
  "1000",
  "1100",
  "1400",
  "1600",
  "1100",
  "1000",
  "1000",
  "900",
  "800",
  "900",
  "900",
  "1200",
  "1800",
  "1600",
  "1600",
  "1500",
  "1500",
  "1600",
  "1600",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1600",
  "1600",
  "1600",
  "1600",
  "1600",
  "1600",
  "900",
  "1000",
  "1000",
  "1000",
  "900",
  "900",
  "900",
  "430",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "800",
  "800",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "800",
  "800",
  "800",
  "900",
  "900",
  "800",
  "1100",
  "800",
  "800",
  "900",
  "1100",
  "800",
  "800",
  "700",
  "700",
  "700",
  "700",
  "700",
  "700",
  "700",
  "900",
  "1300",
  "1500",
  "800",
  "900",
  "900",
  "900",
  "800",
  "1100",
  "1100",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "700",
  "700",
  "700",
  "600",
  "600",
  "700",
  "700",
  "800",
  "800",
  "700",
  "700",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "750",
  "750",
  "750",
  "750",
  "700",
  "700",
  "800",
  "750",
  "800",
  "800",
  "1100",
  "1000",
  "1200",
  "1200",
  "1000",
  "1000",
  "1000",
  "1000",
  "1200",
  "1200",
  "1000",
  "900",
  "1000",
  "1200",
  "1200",
  "1300",
  "1200",
  "1200",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1200",
  "1200",
  "1200",
  "1200",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "1500",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1500",
  "1300",
  "1300",
  "1300",
  "1800",
  "1800",
  "1800",
  "1800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "1200",
  "1200",
  "1200",
  "1200",
  "900",
  "900",
  "1200",
  "1100",
  "1100",
  "2500",
  "2500",
  "2500",
  "2500",
  "1700",
  "2500",
  "2500",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1100",
  "1100",
  "1000",
  "1000",
  "1000",
  "800",
  "800",
  "1000",
  "1000",
  "1000",
  "1000",
  "1600",
  "1600",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "1800",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "1600",
  "1600",
  "1600",
  "2000",
  "2000",
  "2000",
  "2000",
  "2000",
  "1800",
  "2000",
  "2000",
  "1800",
  "1800",
  "1600",
  "1600",
  "1800",
  "1800",
  "1800",
  "1500",
  "1500",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "1300",
  "900",
  "900",
  "900",
  "900",
  "900",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1000",
  "1000",
  "1000",
  "1000",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "800",
  "1200",
  "800",
  "800",
  "800",
  "800",
  "750",
  "1400",
  "1400",
  "1400",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1400",
  "1400",
  "900",
  "900",
  "900",
  "900",
  "900",
  "900",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "900",
  "900",
  "900",
  "900",
  "900",
  "800",
  "900",
  "900",
  "900",
  "900",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "900",
  "900",
  "800",
  "800",
  "800",
  "750",
  "700",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1200",
  "1000",
  "1000",
  "1000",
  "750",
  "750",
  "750",
  "750",
  "750",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1500",
  "1100",
  "1100",
  "1100",
  "1100",
  "1100",
  "1000",
  "1000",
  "1000",
  "1000",
  "1000",
  "2000",
  "1500",
  "1000",
  "1000",
  "1000",
  "1000",
  "1200",
  "1200",
  "1200",
  "900",
  "800",
  "600",
  "500",
  "500",
  "700",
  "600",
  "500",
  "400",
  "700",
  "700",
  "700",
  "700",
  "700",
  "600",
  "1000",
  "800",
  "800",
  "900",
  "1000",
  "1000",
  "1000",
  "1000",
  "900",
  "900",
  "800",
  "800",
  "750",
  "750",
  "750",
  "750",
  "700",
  "700",
  "1300",
  "1300",
  "1600",
  "2500",
  "2500",
  "2300",
  "2400",
  "2400",
  "2400",
  "2400",
  "2400",
];
const dates = [
  "03-07-2025",
  "02-07-2025",
  "01-07-2025",
  "30-06-2025",
  "29-06-2025",
  "27-06-2025",
  "26-06-2025",
  "25-06-2025",
  "24-06-2025",
  "23-06-2025",
  "22-06-2025",
  "20-06-2025",
  "19-06-2025",
  "18-06-2025",
  "17-06-2025",
  "16-06-2025",
  "15-06-2025",
  "14-06-2025",
  "13-06-2025",
  "12-06-2025",
  "11-06-2025",
  "10-06-2025",
  "09-06-2025",
  "08-06-2025",
  "07-06-2025",
  "06-06-2025",
  "05-06-2025",
  "04-06-2025",
  "03-06-2025",
  "02-06-2025",
  "01-06-2025",
  "30-05-2025",
  "29-05-2025",
  "28-05-2025",
  "27-05-2025",
  "25-05-2025",
  "23-05-2025",
  "22-05-2025",
  "21-05-2025",
  "20-05-2025",
  "19-05-2025",
  "18-05-2025",
  "17-05-2025",
  "16-05-2025",
  "14-05-2025",
  "13-05-2025",
  "12-05-2025",
  "11-05-2025",
  "08-05-2025",
  "07-05-2025",
  "06-05-2025",
  "05-05-2025",
  "02-05-2025",
  "01-05-2025",
  "30-04-2025",
  "29-04-2025",
  "28-04-2025",
  "27-04-2025",
  "26-04-2025",
  "25-04-2025",
  "24-04-2025",
  "23-04-2025",
  "22-04-2025",
  "21-04-2025",
  "20-04-2025",
  "19-04-2025",
  "18-04-2025",
  "17-04-2025",
  "16-04-2025",
  "15-04-2025",
  "14-04-2025",
  "13-04-2025",
  "12-04-2025",
  "11-04-2025",
  "10-04-2025",
  "09-04-2025",
  "08-04-2025",
  "07-04-2025",
  "06-04-2025",
  "05-04-2025",
  "04-04-2025",
  "03-04-2025",
  "02-04-2025",
  "30-03-2025",
  "29-03-2025",
  "28-03-2025",
  "27-03-2025",
  "26-03-2025",
  "25-03-2025",
  "24-03-2025",
  "23-03-2025",
  "22-03-2025",
  "21-03-2025",
  "20-03-2025",
  "19-03-2025",
  "18-03-2025",
  "17-03-2025",
  "16-03-2025",
  "15-03-2025",
  "14-03-2025",
  "13-03-2025",
  "12-03-2025",
  "11-03-2025",
  "10-03-2025",
  "09-03-2025",
  "08-03-2025",
  "07-03-2025",
  "06-03-2025",
  "05-03-2025",
  "04-03-2025",
  "03-03-2025",
  "02-03-2025",
  "01-03-2025",
  "28-02-2025",
  "27-02-2025",
  "26-02-2025",
  "25-02-2025",
  "24-02-2025",
  "23-02-2025",
  "22-02-2025",
  "21-02-2025",
  "20-02-2025",
  "19-02-2025",
  "18-02-2025",
  "17-02-2025",
  "16-02-2025",
  "15-02-2025",
  "13-02-2025",
  "12-02-2025",
  "11-02-2025",
  "10-02-2025",
  "09-02-2025",
  "08-02-2025",
  "07-02-2025",
  "06-02-2025",
  "05-02-2025",
  "04-02-2025",
  "03-02-2025",
  "02-02-2025",
  "01-02-2025",
  "31-01-2025",
  "30-01-2025",
  "29-01-2025",
  "28-01-2025",
  "27-01-2025",
  "26-01-2025",
  "25-01-2025",
  "24-01-2025",
  "23-01-2025",
  "22-01-2025",
  "21-01-2025",
  "27-12-2024",
  "26-12-2024",
  "22-12-2024",
  "21-12-2024",
  "20-12-2024",
  "19-12-2024",
  "18-12-2024",
  "17-12-2024",
  "16-12-2024",
  "15-12-2024",
  "12-12-2024",
  "11-12-2024",
  "09-12-2024",
  "08-12-2024",
  "04-12-2024",
  "03-12-2024",
  "02-12-2024",
  "01-12-2024",
  "29-11-2024",
  "28-11-2024",
  "27-11-2024",
  "26-11-2024",
  "25-11-2024",
  "24-11-2024",
  "21-11-2024",
  "20-11-2024",
  "19-11-2024",
  "18-11-2024",
  "15-11-2024",
  "14-11-2024",
  "12-11-2024",
  "11-11-2024",
  "10-11-2024",
  "09-11-2024",
  "07-11-2024",
  "06-11-2024",
  "05-11-2024",
  "03-11-2024",
  "02-11-2024",
  "01-11-2024",
  "31-10-2024",
  "28-10-2024",
  "27-10-2024",
  "26-10-2024",
  "23-10-2024",
  "22-10-2024",
  "21-10-2024",
  "20-10-2024",
  "19-10-2024",
  "18-10-2024",
  "17-10-2024",
  "16-10-2024",
  "15-10-2024",
  "14-10-2024",
  "13-10-2024",
  "12-10-2024",
  "11-10-2024",
  "09-10-2024",
  "08-10-2024",
  "07-10-2024",
  "06-10-2024",
  "05-10-2024",
  "02-10-2024",
  "01-10-2024",
  "30-09-2024",
  "29-09-2024",
  "28-09-2024",
  "27-09-2024",
  "26-09-2024",
  "25-09-2024",
  "24-09-2024",
  "23-09-2024",
  "20-09-2024",
  "19-09-2024",
  "18-09-2024",
  "17-09-2024",
  "16-09-2024",
  "15-09-2024",
  "12-09-2024",
  "10-09-2024",
  "02-09-2024",
  "01-09-2024",
  "28-08-2024",
  "26-08-2024",
  "25-08-2024",
  "23-08-2024",
  "22-08-2024",
  "21-08-2024",
  "20-08-2024",
  "19-08-2024",
  "18-08-2024",
  "17-08-2024",
  "16-08-2024",
  "15-08-2024",
  "13-08-2024",
  "12-08-2024",
  "07-08-2024",
  "06-08-2024",
  "05-08-2024",
  "04-08-2024",
  "02-08-2024",
  "01-08-2024",
  "31-07-2024",
  "23-07-2024",
  "22-07-2024",
  "18-07-2024",
  "15-07-2024",
  "14-07-2024",
  "13-07-2024",
  "12-07-2024",
  "11-07-2024",
  "10-07-2024",
  "09-07-2024",
  "08-07-2024",
  "07-07-2024",
  "06-07-2024",
  "05-07-2024",
  "04-07-2024",
  "03-07-2024",
  "02-07-2024",
  "01-07-2024",
  "30-06-2024",
  "28-06-2024",
  "27-06-2024",
  "26-06-2024",
  "23-06-2024",
  "22-06-2024",
  "21-06-2024",
  "18-06-2024",
  "17-06-2024",
  "16-06-2024",
  "14-06-2024",
  "13-06-2024",
  "12-06-2024",
  "11-06-2024",
  "10-06-2024",
  "06-06-2024",
  "05-06-2024",
  "03-06-2024",
  "02-06-2024",
  "31-05-2024",
  "29-05-2024",
  "28-05-2024",
  "27-05-2024",
  "26-05-2024",
  "25-05-2024",
  "22-05-2024",
  "21-05-2024",
  "20-05-2024",
  "19-05-2024",
  "18-05-2024",
  "17-05-2024",
  "16-05-2024",
  "15-05-2024",
  "14-05-2024",
  "13-05-2024",
  "12-05-2024",
  "09-05-2024",
  "08-05-2024",
  "07-05-2024",
  "06-05-2024",
  "04-05-2024",
  "03-05-2024",
  "02-05-2024",
  "01-05-2024",
  "30-04-2024",
  "05-04-2024",
  "29-03-2024",
  "28-03-2024",
  "27-03-2024",
  "26-03-2024",
  "22-03-2024",
  "21-03-2024",
  "20-03-2024",
  "19-03-2024",
  "17-03-2024",
  "16-03-2024",
  "15-03-2024",
  "14-03-2024",
  "13-03-2024",
  "12-03-2024",
  "11-03-2024",
  "10-03-2024",
  "09-03-2024",
  "06-03-2024",
  "05-03-2024",
  "04-03-2024",
  "01-03-2024",
  "29-02-2024",
  "27-02-2024",
  "26-02-2024",
  "25-02-2024",
  "23-02-2024",
  "22-02-2024",
  "21-02-2024",
  "20-02-2024",
  "18-02-2024",
  "17-02-2024",
  "16-02-2024",
  "10-02-2024",
  "07-02-2024",
  "06-02-2024",
  "05-02-2024",
  "03-02-2024",
  "02-02-2024",
  "01-02-2024",
  "31-01-2024",
  "31-12-2023",
  "29-12-2023",
  "28-12-2023",
  "27-12-2023",
  "26-12-2023",
  "25-12-2023",
  "21-12-2023",
  "20-12-2023",
  "19-12-2023",
  "18-12-2023",
  "17-12-2023",
  "16-12-2023",
  "15-12-2023",
  "14-12-2023",
  "13-12-2023",
  "12-12-2023",
  "11-12-2023",
  "10-12-2023",
  "09-12-2023",
  "08-12-2023",
  "04-12-2023",
  "03-12-2023",
  "01-12-2023",
  "29-11-2023",
  "27-11-2023",
  "26-11-2023",
  "25-11-2023",
  "24-11-2023",
  "23-11-2023",
  "22-11-2023",
  "21-11-2023",
  "20-11-2023",
  "17-11-2023",
  "16-11-2023",
  "15-11-2023",
  "13-11-2023",
  "07-11-2023",
  "06-11-2023",
  "05-11-2023",
  "04-11-2023",
  "01-11-2023",
  "31-10-2023",
  "29-10-2023",
  "28-10-2023",
  "26-10-2023",
  "25-10-2023",
  "24-10-2023",
  "23-10-2023",
  "20-10-2023",
  "19-10-2023",
  "18-10-2023",
  "17-10-2023",
  "15-10-2023",
  "30-05-2023",
  "29-05-2023",
  "28-05-2023",
  "22-05-2023",
  "21-05-2023",
  "20-05-2023",
  "19-05-2023",
  "18-05-2023",
  "17-05-2023",
  "16-05-2023",
  "15-05-2023",
  "14-05-2023",
  "11-05-2023",
  "10-05-2023",
  "09-05-2023",
  "08-05-2023",
  "07-05-2023",
  "06-05-2023",
  "05-05-2023",
  "04-05-2023",
  "03-05-2023",
  "02-05-2023",
  "01-05-2023",
  "30-04-2023",
  "28-04-2023",
  "27-04-2023",
  "26-04-2023",
  "25-04-2023",
  "24-04-2023",
  "23-04-2023",
  "20-04-2023",
  "19-04-2023",
  "08-03-2023",
  "10-10-2022",
  "18-09-2022",
  "18-05-2022",
  "17-05-2022",
  "16-05-2022",
  "11-05-2022",
  "10-05-2022",
  "09-05-2022",
  "03-05-2022",
  "21-04-2022",
  "20-04-2022",
  "10-04-2022",
  "23-03-2022",
  "22-03-2022",
  "21-03-2022",
  "16-03-2022",
  "15-03-2022",
  "13-03-2022",
  "08-03-2022",
  "07-03-2022",
  "06-03-2022",
  "05-03-2022",
  "04-03-2022",
  "03-03-2022",
  "27-02-2022",
  "23-02-2022",
  "22-02-2022",
  "16-02-2022",
  "10-02-2022",
  "09-02-2022",
  "08-02-2022",
  "03-02-2022",
  "01-02-2022",
  "31-01-2022",
  "28-01-2022",
  "26-01-2022",
  "24-01-2022",
  "23-01-2022",
  "22-01-2022",
  "18-01-2022",
  "17-01-2022",
  "16-01-2022",
  "11-01-2022",
  "10-01-2022",
  "09-01-2022",
  "07-01-2022",
  "06-01-2022",
  "05-01-2022",
  "04-01-2022",
  "03-01-2022",
  "02-01-2022",
  "01-01-2022",
  "31-12-2021",
];
const cauliflowerAnalysis = {
  summary: {
    HighestPrice: "₹2,500",
    LowestPrice: "₹400",
    LatestPrice: "₹1,000",
    "30-DayAverage": "₹1,170",
    "3-MonthTrend": "📉 Down from peak (June end)",
    PriceStability: "❗ High volatility (₹300–600/day swings)",
  },
  context: [
    "Peak Supply Months: November to February (rabi/early spring)",
    "Off-season production: June–September (rainfed or irrigated, costlier)",
    "Weather Impact (June–July): Erratic rains → can reduce arrivals → cause spikes",
    "✅ Your current prices (₹1000–₹1600) are typical for mid-supply or early monsoon phase.",
    "✅ Prices have gone as high as ₹2500 due to off-season scarcity.",
  ],
  weeklyPrices: [
    { weekEnding: "03 July", avgPrice: 1275, remark: "Slight decline" },
    {
      weekEnding: "30 June",
      avgPrice: "1,400+",
      remark: "Possibly lower arrivals",
    },
    { weekEnding: "23 June", avgPrice: 1100, remark: "Stabilized after dip" },
    { weekEnding: "16 June", avgPrice: 1500, remark: "Short surge" },
    { weekEnding: "09 June", avgPrice: 1500, remark: "Stable" },
  ],
  recommendations: [
    {
      title: "✅ 1. If You’re Harvesting Now:",
      points: [
        "🟢 Sell in small daily lots, not all at once.",
        "🟢 Wait for mini-spikes (~₹1400–₹1600) before selling bulk.",
        "🟡 Avoid panic selling below ₹1000 unless quality is dropping.",
      ],
    },
    {
      title: "🧺 2. If You Can Store/Irrigate:",
      points: [
        "📦 Store and time sales with high-demand days (Tuesday, Friday markets).",
        "🌱 Focus on size and freshness — off-season cauliflower fetches a premium.",
      ],
    },
    {
      title: "🌾 3. Planning Next Season:",
      points: [
        "Cauliflower is a profitable crop in Chittoor during off-season.",
        "You’ve seen consistent ₹1000+ prices since Feb.",
        "Using early or late-maturing hybrids (e.g., Snowball 16, Pusa Shubhra).",
        "Irrigation or shade-net production for July–Sept sales.",
      ],
    },
  ],
  finalSummary: [
    {
      situation: "Harvesting",
      action: "Sell partially, hold for ₹1400+ spike",
    },
    {
      situation: "Have Storage/Irrigation",
      action: "Delay sale till next market peak",
    },
    {
      situation: "Future Planning",
      action: "Profitable crop – expand cautiously",
    },
    { situation: "Price Risk", action: "Watch for oversupply → price drops" },
  ],
  alerts: [
    "📉 Below ₹900 = Market glut — reduce dispatch volume",
    "📈 Above ₹1500 = Peak demand — sell bulk if quality is good",
    "🧊 Heavy rains = Limited supply — expect spikes",
  ],
};

const API_BASE_URL = "https://ad17-124-66-175-46.ngrok-free.app";
const LANGUAGE = "english";

export default function MarketplaceScreen() {
  const [showAnalysis, setShowAnalysis] = useState(false);
  const { colors, spacing, radius } = useTheme();
  const [activeTab, setActiveTab] = useState("listings");
  const [searchQuery, setSearchQuery] = useState("");
  const [marketItems, setMarketItems] = useState<MarketItem[]>([]);
  const [loading, setLoading] = useState(true);

  const handleSearch = () => {
    if (searchQuery.trim() !== "") {
      setShowAnalysis(true);
    } else {
      setShowAnalysis(false);
    }
  };

  return (
    <SafeAreaView
      style={[styles.container, { backgroundColor: colors.background }]}
    >
      <ScrollView>
        {/* Header */}
        <View style={[styles.header, { backgroundColor: colors.text }]}>
          <Typography variant="heading" style={{ color: colors.background }}>
            Market Analysis
          </Typography>
          <TouchableOpacity
            style={[
              styles.filterButton,
              {
                backgroundColor: colors.textSecondary,
              },
            ]}
          >
            <Filter width={20} height={20} stroke={colors.background} />
          </TouchableOpacity>
        </View>
        {/* search bar */}
        {/* Search Bar */}
        <View style={styles.searchContainer}>
          <TextInput
            placeholder="Enter market or crop..."
            placeholderTextColor="#999"
            style={[styles.searchInput, { borderColor: colors.text }]}
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
          <TouchableOpacity
            style={[styles.searchButton, { backgroundColor: colors.text }]}
            onPress={handleSearch}
          >
            <Text style={{ color: colors.background, fontWeight: "bold" }}>
              Search
            </Text>
          </TouchableOpacity>
        </View>

        {/* Chart */}
        {showAnalysis && (
          <>
            <View style={{ marginVertical: 20 }}>
              <Typography
                variant="subheading"
                style={{ marginLeft: 20, marginBottom: 10, color: colors.text }}
              >
                Price Trend in (rupees per quintal)
              </Typography>
              <MarketPriceChart prices={prices} dates={dates} />
            </View>

            {/* Cauliflower Report */}
            <View style={styles.cauliflowerCard}>
              <Text style={styles.sectionTitle}>
                📊 Cauliflower Market Analysis – Palamaner Mandi, Chittoor (As
                of 11-07-2025)
              </Text>

              <Text style={styles.sectionSubTitle}>🧾 Summary</Text>
              <View style={styles.tableContainer}>
                <View style={[styles.tableRow, styles.tableHeader]}>
                  <Text style={styles.tableCell}>Metric</Text>
                  <Text style={styles.tableCell}>Value</Text>
                </View>
                {Object.entries(cauliflowerAnalysis.summary).map(
                  ([key, val], idx) => (
                    <View
                      key={idx}
                      style={[
                        styles.tableRow,
                        idx % 2 === 1 && styles.tableRowAlt,
                      ]}
                    >
                      <Text style={styles.tableCell}>
                        {key.replace(/([A-Z])/g, " $1")}
                      </Text>
                      <Text style={styles.tableCell}>{val}</Text>
                    </View>
                  )
                )}
              </View>

              <Text style={styles.sectionSubTitle}>
                🌦 Seasonal Context – Cauliflower in Chittoor
              </Text>
              {cauliflowerAnalysis.context.map((point, i) => (
                <Text key={i} style={styles.bulletItem}>
                  • {point}
                </Text>
              ))}

              <Text style={styles.sectionSubTitle}>
                📆 June–July Price Summary
              </Text>
              <View style={styles.tableContainer}>
                <View style={[styles.tableRow, styles.tableHeader]}>
                  <Text style={styles.tableCell}>Week Ending</Text>
                  <Text style={styles.tableCell}>Avg Price (₹)</Text>
                  <Text style={styles.tableCell}>Remark</Text>
                </View>
                {cauliflowerAnalysis.weeklyPrices.map((entry, i) => (
                  <View
                    key={i}
                    style={[styles.tableRow, i % 2 === 1 && styles.tableRowAlt]}
                  >
                    <Text style={styles.tableCell}>{entry.weekEnding}</Text>
                    <Text style={styles.tableCell}>{entry.avgPrice}</Text>
                    <Text style={styles.tableCell}>{entry.remark}</Text>
                  </View>
                ))}
              </View>

              <Text style={styles.bulletItem}>
                🔁 Pattern: Prices spike every 10–12 days, then fall again.
              </Text>
              <Text style={styles.bulletItem}>
                📉 Decline is not due to demand crash but intermittent surplus.
              </Text>

              <Text style={styles.sectionSubTitle}>
                🚜 Farmer Recommendations
              </Text>
              {cauliflowerAnalysis.recommendations.map((rec, i) => (
                <View key={i}>
                  <Text style={styles.recommendationTitle}>{rec.title}</Text>
                  {rec.points.map((pt, j) => (
                    <Text key={j} style={styles.bulletItem}>
                      • {pt}
                    </Text>
                  ))}
                </View>
              ))}

              <Text style={styles.sectionSubTitle}>
                📌 Final Recommendation Summary
              </Text>
              <View style={styles.tableContainer}>
                <View style={[styles.tableRow, styles.tableHeader]}>
                  <Text style={styles.tableCell}>Situation</Text>
                  <Text style={styles.tableCell}>Action</Text>
                </View>
                {cauliflowerAnalysis.finalSummary.map((row, idx) => (
                  <View
                    key={idx}
                    style={[
                      styles.tableRow,
                      idx % 2 === 1 && styles.tableRowAlt,
                    ]}
                  >
                    <Text style={styles.tableCell}>{row.situation}</Text>
                    <Text style={styles.tableCell}>{row.action}</Text>
                  </View>
                ))}
              </View>

              <Text style={styles.sectionSubTitle}>📢 Alerts to Watch</Text>
              {cauliflowerAnalysis.alerts.map((a, i) => (
                <Text key={i} style={styles.bulletItem}>
                  • {a}
                </Text>
              ))}
            </View>
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 16,
  },
  filterButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: "center",
    alignItems: "center",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },

  searchIcon: {
    marginRight: 10,
  },

  listContainer: {
    padding: 20,
    paddingBottom: 100,
  },
  listingCard: {
    marginBottom: 24,
    overflow: "hidden",
    borderRadius: 16,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  listingImage: {
    width: "100%",
    height: 200,
  },
  listingContent: {
    padding: 16,
  },
  listingHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 10,
  },
  favoriteButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
  },
  categoryContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 10,
    backgroundColor: "#F0F8FF",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
    alignSelf: "flex-start",
  },
  description: {
    marginBottom: 16,
    lineHeight: 20,
  },
  sellerContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 16,
    backgroundColor: "#FAFAFA",
    padding: 10,
    borderRadius: 8,
  },
  sellerImage: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
    borderWidth: 2,
    borderColor: "white",
  },
  bidSection: {
    marginBottom: 16,
    backgroundColor: "#F8F9FA",
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#EAEAEA",
  },
  bidSectionTitle: {
    fontWeight: "700",
    marginBottom: 12,
    fontSize: 15,
  },
  bidList: {
    marginBottom: 16,
    borderLeftWidth: 3,
    borderLeftColor: "#E0E7FF",
    paddingLeft: 12,
  },
  bidItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 8,
    paddingVertical: 4,
  },
  placeBidContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  bidInput: {
    flex: 1,
    height: 40,
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 10,
    marginRight: 8,
  },
  bidButton: {
    width: 40,
    height: 40,
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
  },
  contactButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 10,
    borderWidth: 1,
    borderRadius: 8,
  },
  tabsContainer: {
    flexDirection: "row",
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    marginBottom: 20,
  },
  tab: {
    paddingVertical: 12,
    marginRight: 24,
  },
  activeTab: {
    borderBottomWidth: 3,
  },
  cauliflowerCard: {
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 16,
    margin: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  sectionSubTitle: {
    fontSize: 18,
    fontWeight: "600",
    marginVertical: 10,
    color: "#444",
  },
  bulletItem: {
    fontSize: 16,
    marginVertical: 4,
    color: "#555",
  },
  recommendationTitle: {
    fontSize: 17,
    fontWeight: "600",
    marginTop: 12,
    color: "#333",
  },
  tableContainer: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    marginVertical: 10,
  },
  tableRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 8,
    paddingHorizontal: 10,
  },
  tableRowAlt: {
    backgroundColor: "#F9F9F9",
  },
  tableHeader: {
    backgroundColor: "#E0E0E0",
  },
  tableCell: {
    flex: 1,
    fontSize: 16,
    color: "#333",
  },
  searchContainer: {
    flexDirection: "row",
    paddingHorizontal: 20,
    marginTop: 10,
    alignItems: "center",
    gap: 10,
  },
  searchInput: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 10,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 16,
    backgroundColor: "#f2f2f2",
    color: "#000",
  },
  searchButton: {
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 10,
  },
});
